/* *********************************************************************** *
 * project: org.matsim.*
 * MATSimConfigObject.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2010 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

/**
 * 
 */
package playground.tnicolai.urbansim.utils;

import org.apache.log4j.Logger;
import org.matsim.core.config.groups.ControlerConfigGroup;
import org.matsim.core.config.groups.NetworkConfigGroup;
import org.matsim.core.config.groups.StrategyConfigGroup;
import org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams;
import org.matsim.core.scenario.ScenarioImpl;

import playground.tnicolai.urbansim.com.matsim.config.ConfigType;
import playground.tnicolai.urbansim.com.matsim.config.Matsim4UrbansimType;
import playground.tnicolai.urbansim.com.matsim.config.MatsimConfigType;
import playground.tnicolai.urbansim.constants.Constants;

/**
 * @author thomas
 *
 */
public class InitMATSimScenario {
	
	// logger
	private static final Logger log = Logger.getLogger(InitMATSimScenario.class);
	
	// MATSim scenario
	private ScenarioImpl scenario 	= null;
	// JAXB representation of matsim4urbansim config
	private MatsimConfigType matsimConfig = null;
	
	/**
	 * constructor
	 * 
	 * @param scenario stores MATSim parameters
	 * @param matsimConfig stores all parameters from matsim4urbansim config ( generated by UrbanSim )
	 */
	public InitMATSimScenario(ScenarioImpl scenario, MatsimConfigType matsimConfig){
		this.scenario = scenario;
		this.matsimConfig = matsimConfig;	
	}
	
	/**
	 * Transferring all parameter from matsim4urbansim config to internal MATSim config/scenario
	 * @return boolean true if initialization successful
	 */
	public boolean init(){
		
		try{
			// get root elements from JAXB matsim4urbansim config object
			ConfigType matsimParameter = matsimConfig.getConfig();
			Matsim4UrbansimType matsim4UrbanSimParameter = matsimConfig.getMatsim4Urbansim();
			
			initMATSim4UrbanSimParameter(matsim4UrbanSimParameter);
			initNetwork(matsimParameter);
			initControler(matsimParameter);
			initPlanCalcScore(matsimParameter);
			initStrategy();
			
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		return true;
		
	}
	
	/**
	 * store matsim4urbansim parameter in MATSim config.Param()
	 * 
	 * @param matsim4UrbanSimParameter
	 */
	private void initMATSim4UrbanSimParameter(Matsim4UrbansimType matsim4UrbanSimParameter){
		log.info("Setting MATSim4UrbanSim parameter to config...");
		double samplingRate = matsim4UrbanSimParameter.getUrbansimParameter().getSamplingRate();
		int year = matsim4UrbanSimParameter.getUrbansimParameter().getYear().intValue();
		String tempDirectory = matsim4UrbanSimParameter.getUrbansimParameter().getTempDirectory();
		String opusHomeDirectory = matsim4UrbanSimParameter.getUrbansimParameter().getOpusHOME();
		boolean isTestRun = matsim4UrbanSimParameter.getUrbansimParameter().isIsTestRun();
		
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM, Constants.IS_TEST_RUN, isTestRun ? "TRUE" : "FALSE");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM, Constants.SAMPLING_RATE, samplingRate + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM, Constants.TEMP_DIRECTORY, tempDirectory);
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM, Constants.OPUS_HOME_DIRECTORY, opusHomeDirectory);
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM, Constants.YEAR, year + "");
		log.info("... done!");
		log.info("MATSim4UrbanSim Parameter -> SamplingRate: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM, Constants.SAMPLING_RATE) + 
											 " Year: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM, Constants.YEAR) + 
											 " TempDir: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM, Constants.TEMP_DIRECTORY) + 
											 " OPUS_HOME: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM, Constants.OPUS_HOME_DIRECTORY) + 
											 " TestRun: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM, Constants.IS_TEST_RUN));
		
		// set opus (sub-)directories
		setOpusHomeDirectory(opusHomeDirectory);
	}
	
	/**
	 * setting MATSim network
	 * 
	 * @param matsimParameter
	 */
	private void initNetwork(ConfigType matsimParameter){
		log.info("Setting network to config...");
		String networkFile = matsimParameter.getNetwork().getInputFile();
		NetworkConfigGroup networkCG = (NetworkConfigGroup) scenario.getConfig().getModule(NetworkConfigGroup.GROUP_NAME);
		// set values
		networkCG.setInputFile( networkFile );	// network
		log.info("... done!");
		log.info("Network: " + networkCG.getInputFile());
	}
	
	/**
	 * setting controler parameter
	 * 
	 * @param matsimParameter
	 */
	private void initControler(ConfigType matsimParameter){
		log.info("Setting controler to config...");
		int firstIteration = matsimParameter.getControler().getFirstIteration().intValue();
		int lastIteration = matsimParameter.getControler().getLastIteration().intValue();
		ControlerConfigGroup controlerCG = (ControlerConfigGroup) scenario.getConfig().getModule(ControlerConfigGroup.GROUP_NAME);
		// set values
		controlerCG.setFirstIteration( firstIteration );	// controller (first, last iteration)
		controlerCG.setLastIteration( lastIteration);
		controlerCG.setOutputDirectory( Constants.OPUS_MATSIM_OUTPUT_DIRECTORY );
		log.info("... done!");
		log.info("Controler FirstIteration: " + controlerCG.getFirstIteration() + " LastIteration: " + controlerCG.getLastIteration() + 
				          " MATSim output directory: " +  controlerCG.getOutputDirectory());
	}
	
	/**
	 * setting planCalcScore parameter
	 * 
	 * @param matsimParameter
	 */
	private void initPlanCalcScore(ConfigType matsimParameter){
		log.info("Setting planCalcScore to config...");
		String activityType_0 = matsimParameter.getPlanCalcScore().getActivityType0();
		String activityType_1 = matsimParameter.getPlanCalcScore().getActivityType1();
		ActivityParams actType0 = new ActivityParams(activityType_0);
		actType0.setTypicalDuration(12*60*60);	// tnicolai: make configurable
		ActivityParams actType1 = new ActivityParams(activityType_1);
		actType1.setTypicalDuration(8*60*60);	// tnicolai: make configurable
		actType1.setOpeningTime(7*3600);		// tnicolai: make configurable
		actType1.setLatestStartTime(9*3600);	// tnicolai: make configurable
		scenario.getConfig().planCalcScore().addActivityParams( actType0 );
		scenario.getConfig().planCalcScore().addActivityParams( actType1 );
		log.info("... done!");
		log.info("PlanCalcScore Activity_Type_0: " + actType0.getType() + " Typical Duration Activity_Type_0: " + actType0.getTypicalDuration() + 
							  " Activity_Type_1: " + actType1.getType() + " Typical Duration Activity_Type_1: " + actType1.getTypicalDuration() + 
							  " Opening Time Activity_Type_1: " + actType1.getOpeningTime() + " Latest Start Time Activity_Type_1: " + actType1.getLatestStartTime());
	}
	
	/**
	 * setting strategy
	 */
	private void initStrategy(){
		log.info("Setting strategy to config...");
		// configure strategies for re-planning tnicolai: make configurable
		scenario.getConfig().strategy().setMaxAgentPlanMemorySize(5);
		
		StrategyConfigGroup.StrategySettings timeAlocationMutator = new StrategyConfigGroup.StrategySettings(IdFactory.get(1));
		timeAlocationMutator.setModuleName("TimeAllocationMutator");
		timeAlocationMutator.setProbability(0.1);
		timeAlocationMutator.setDisableAfter(100);
		scenario.getConfig().strategy().addStrategySettings(timeAlocationMutator);
		
		StrategyConfigGroup.StrategySettings changeExpBeta = new StrategyConfigGroup.StrategySettings(IdFactory.get(2));
		changeExpBeta.setModuleName("ChangeExpBeta");
		changeExpBeta.setProbability(0.9);
		scenario.getConfig().strategy().addStrategySettings(changeExpBeta);
		
		StrategyConfigGroup.StrategySettings reroute = new StrategyConfigGroup.StrategySettings(IdFactory.get(3));
		reroute.setModuleName("ReRoute_Dijkstra");
		reroute.setProbability(0.1);
		reroute.setDisableAfter(100);
		scenario.getConfig().strategy().addStrategySettings(reroute);
		log.info("... done!");
		log.info("Strategy Strategy_1: " + timeAlocationMutator.getModuleName() + " Probability Strategy_1: " + timeAlocationMutator.getProbability() + " Disable After Itereation (Strategy_1): " + timeAlocationMutator.getDisableAfter() + 
						 " Strategy_2: " + changeExpBeta.getModuleName() + " Probability Strategy_2: " + changeExpBeta.getProbability() +
						 " Strategy_3_ " + reroute.getModuleName() + " Probability Strategy_3: " + reroute.getProbability() + " Disable After Itereation (Strategy_3): " + reroute.getDisableAfter() );
	}
	
	/**
	 * only for debugging and testing reasons.
	 * cecks if xml config contains the key word "TEST_DIRECTORY"
	 * to set OPUS_HOME to that directory.
	 */
	private void setOpusHomeDirectory(String opusHomeDirectory ){
		
		// update opus home path if needed
		if( Constants.OPUS_HOME == null || !Constants.OPUS_HOME.equalsIgnoreCase(opusHomeDirectory)){
			log.info("Setting OPUS_HOME path ...");
			Constants.setOpusHomeDirectory(opusHomeDirectory);
		}
	}

	
}

