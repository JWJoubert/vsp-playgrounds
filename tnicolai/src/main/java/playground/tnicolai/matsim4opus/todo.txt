Todos:

- Spatial Grid: Testmethode implementieren, Skripte vereinfachen!!!

- Paper for D7.2. (tech report):
	- Reference to Software issues Paper (we solved the coupling as follows ... see Paper ...)
	- What data goes from UrbanSim to MATSim
	- What does MATSim do with this?
	- What does MATsim return?

- MATSim4UrbanSim Config: 
	- DONE! make "opportunity" sampling rate configurable
	- DONE! add "Radius" to spread Home/Worklocations for UrbanSim-Zone
	- implement a "Switch" on the UrbanSim side to choose between Radius or Shape-file distribution of locations
	- for every year running MATsim a separate Config file is needed!!! (there different networks can be defined simulating a changing network over years)
- Pt and road pricing: are available via standard MATSim config, this just needs to be explicitly documented in the User Guide !!! (nothing else todo)
- add a "Travel model visualization" section: "There are at least two options to visualize matsim: 1. OTFVis or 2. senozon via" -> to be done by senozone ???
- for UrbanSim ZONE: spread persons within a zone like in "tutorial.unsupported.example80DemandGenerationFromShapefile.DemandGenerator" or use a radius if no shapefile available
- test different beta values
- test accessibility measure paired with workers or 1-person hh or income in UrbanSim
- implement interface for SpatialGrid Interpolation (for returning accessibility values for each parcel), Theresa's task
- (Überlegungen: Zählstellen und Reisezeiten sind für Zürich verfügbar. Hiermit kann getestet werden ob die MATSim Simulation realistisch ist. Merken für Paper/Diss)

------

Tasks Done:
- change SpatialGrid: use 2d array of doubles instead of Double-objects
- MATSimZone: test or implement controllers
- implement ZoneBasedAccessibilityControlerListenerV2 (see Cell-Based approach ...)
- implement controller for agent-based performance feedback (time spent traveling, money spent traveling, etc.)
- orthogonal mapping of measuring points, i.e. othog. walk time from point2Link + walk or car travel time from link intersection 2 nearest node
	- test why plots of this implementation looks wired -> solved :-) prevoius implementation wasn't correct
- MATSimZone: implement "get_matsim_data_into_urbansim" -> using a common module for UrbanSim parcel and zone since one zone data is return by now from MATSim (works for both cases)
- implement normal MATSim config as input
- Brussel scenario: matching coordinates of zone centroids and network -> created new network with right projection
- re-implement: determine measuring point to process via cell centroid and not the left bottom corner (shapefiles)

Fixed errors:
- Error while importing Brussels travel_data into UrbanSim -> Problem solved, the "travel_data" dataset was empty. Just imported the travel_data.csv output from MATSim