/* *********************************************************************** *
 * project: org.matsim.*
 * MATSimConfigObject.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2010 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

/**
 * 
 */
package playground.tnicolai.matsim4opus.utils;

import java.io.File;

import org.apache.log4j.Logger;
import org.matsim.core.config.groups.ControlerConfigGroup;
import org.matsim.core.config.groups.NetworkConfigGroup;
import org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams;
import org.matsim.core.config.groups.PlansConfigGroup;
import org.matsim.core.config.groups.SimulationConfigGroup;
import org.matsim.core.config.groups.StrategyConfigGroup;
import org.matsim.core.scenario.ScenarioImpl;

import playground.tnicolai.matsim4opus.constants.Constants;
import playground.tnicolai.matsim4opus.org.matsim.config.ConfigType;
import playground.tnicolai.matsim4opus.org.matsim.config.Matsim4UrbansimType;
import playground.tnicolai.matsim4opus.org.matsim.config.MatsimConfigType;
import playground.tnicolai.matsim4opus.utils.ids.IdFactory;

/**
 * @author thomas
 *
 */
public class InitMATSimScenario {
	
	// logger
	private static final Logger log = Logger.getLogger(InitMATSimScenario.class);
	
	// MATSim scenario
	private ScenarioImpl scenario 	= null;
	// JAXB representation of matsim4urbansim config
	private MatsimConfigType matsimConfig = null;
	
	/**
	 * constructor
	 * 
	 * @param scenario stores MATSim parameters
	 * @param matsimConfig stores all parameters from matsim4urbansim config ( generated by UrbanSim )
	 */
	public InitMATSimScenario(ScenarioImpl scenario, MatsimConfigType matsimConfig){
		this.scenario = scenario;
		this.matsimConfig = matsimConfig;	
	}
	
	/**
	 * Transferring all parameter from matsim4urbansim config to internal MATSim config/scenario
	 * @return boolean true if initialization successful
	 */
	public boolean init(){
		
		try{
			// get root elements from JAXB matsim4urbansim config object
			ConfigType matsimParameter = matsimConfig.getConfig();
			Matsim4UrbansimType matsim4UrbanSimParameter = matsimConfig.getMatsim4Urbansim();
			
			initMATSim4UrbanSimParameter(matsim4UrbanSimParameter);
			initNetwork(matsimParameter);
			initInputPlansFile(matsimParameter);
			initControler(matsimParameter);
			initPlanCalcScore(matsimParameter);
			initSimulation();
			initStrategy();
			
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		return true;
		
	}
	
	/**
	 * store matsim4urbansim parameter in MATSim config.Param()
	 * 
	 * @param matsim4UrbanSimParameter
	 */
	private void initMATSim4UrbanSimParameter(Matsim4UrbansimType matsim4UrbanSimParameter){
		log.info("Setting MATSim4UrbanSim parameter to config...");
		double samplingRate = matsim4UrbanSimParameter.getUrbansimParameter().getSamplingRate();
		int year = matsim4UrbanSimParameter.getUrbansimParameter().getYear().intValue();
		String opusHome = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getOpusHome() );
		String opusDataPath = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getOpusDataPath() );
		String matsim4Opus = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getMatsim4Opus() );
		String matsim4OpusConfig = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getMatsim4OpusConfig() );
		String matsim4OpusOutput = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getMatsim4OpusOutput() );
		String matsim4OpusTemp = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getMatsim4OpusTemp() );
		String matsim4OpusBackup = UtilityCollection.checkPathEnding( matsim4UrbanSimParameter.getUrbansimParameter().getMatsim4Opus() ) + UtilityCollection.checkPathEnding( "backup" );
		boolean isTestRun = matsim4UrbanSimParameter.getUrbansimParameter().isIsTestRun();
		boolean backupRunData = matsim4UrbanSimParameter.getUrbansimParameter().isBackupRunData();
		String testParameter = matsim4UrbanSimParameter.getUrbansimParameter().getTestParameter();
		
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.IS_TEST_RUN, isTestRun ? "TRUE" : "FALSE");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.SAMPLING_RATE, samplingRate + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.OPUS_HOME_PARAM, opusHome );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.OPUS_DATA_PATH_PARAM, opusDataPath );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_PARAM, matsim4Opus );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_CONFIG_PARAM, matsim4OpusConfig );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_OUTPUT_PARAM, matsim4OpusOutput );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_TEMP_PARAM, matsim4OpusTemp );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_BACKUP_PARAM, matsim4OpusBackup );
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.YEAR, year + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BACKUP_RUN_DATA_PARAM, backupRunData ? "TRUE" : "FALSE");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.TEST_PARAMETER_PARAM, testParameter);
		// tnicolai: implement/make configurable the following flags (matsim4urbansim config/JAXB)
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA, 1 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_TIMES, 1 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_TIMES, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_TIMES, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_COSTS, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_COSTS, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_COSTS, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_DISTANCE, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_DISTANCE, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_DISTANCE, 0 + "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.CUSTOM_PARAMETER, "");
		scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MEASUREMENT_LOGFILE, Constants.MATSIM_4_OPUS_TEMP + Constants.MEASUREMENT_LOGFILE);
		
		log.info("Setting OPUS paths ...");
		
		Constants.OPUS_HOME = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.OPUS_HOME_PARAM);
		Constants.OPUS_DATA_PATH = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.OPUS_DATA_PATH_PARAM);
		Constants.MATSIM_4_OPUS = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_PARAM);
		Constants.MATSIM_4_OPUS_CONFIG = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_CONFIG_PARAM);
		Constants.MATSIM_4_OPUS_OUTPUT = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_OUTPUT_PARAM);
		Constants.MATSIM_4_OPUS_TEMP = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_TEMP_PARAM);
		Constants.MATSIM_4_OPUS_BACKUP = scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_4_OPUS_BACKUP_PARAM);
		
		log.info("MATSim4UrbanSim Parameter:");
		log.info("SamplingRate: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.SAMPLING_RATE) );
		log.info("Year: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.YEAR) ); 
		log.info("OPUS_HOME: " + Constants.OPUS_HOME );
		log.info("OPUS_DATA_PATH: " + Constants.OPUS_DATA_PATH );
		log.info("MATSIM_4_OPUS: " + Constants.MATSIM_4_OPUS );
		log.info("MATSIM_4_OPUS_CONIG: " + Constants.MATSIM_4_OPUS_CONFIG );
		log.info("MATSIM_4_OPUS_OUTPUT: " + Constants.MATSIM_4_OPUS_OUTPUT );
		log.info("MATSIM_4_OPUS_TEMP: " + Constants.MATSIM_4_OPUS_TEMP ); 
		log.info("MATSIM_4_OPUS_BACKUP: " + Constants.MATSIM_4_OPUS_BACKUP );
		log.info("TestRun: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.IS_TEST_RUN) );
		log.info("BACKUP_RUN_DATA: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BACKUP_RUN_DATA_PARAM) );
		log.info("TEST_PARAMETER: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.TEST_PARAMETER_PARAM) );
		log.info("Beta: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA) );
		log.info("Beta Travel Times: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_TIMES) );
		log.info("Beta ln(Travel Times): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_TIMES) );
		log.info("Beta power(Travel Times): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_TIMES) );
		log.info("Beta Travel Costs: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_COSTS) );
		log.info("Beta ln(Travel Costs): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_COSTS) );
		log.info("Beta power(Travel Costs): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_COSTS) );
		log.info("Beta Travel Distance: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_TRAVEL_DISTANCE) );
		log.info("Beta ln(Travel Distance): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_LN_TRAVEL_DISTANCE) );
		log.info("Beta power(Travel Distance): " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.BETA_POWER_TRAVEL_DISTANCE) );
		log.info("Custom Parameter: " + scenario.getConfig().getParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.CUSTOM_PARAMETER) );
		log.info("... done!");
	}
	
	/**
	 * setting MATSim network
	 * 
	 * @param matsimParameter
	 */
	private void initNetwork(ConfigType matsimParameter){
		log.info("Setting network to config...");
		String networkFile = matsimParameter.getNetwork().getInputFile();
		NetworkConfigGroup networkCG = (NetworkConfigGroup) scenario.getConfig().getModule(NetworkConfigGroup.GROUP_NAME);
		// set values
		networkCG.setInputFile( networkFile );	// network
		log.info("... done!");
		log.info("Network: " + networkCG.getInputFile());
	}
	
	/**
	 * setting input plans file (for warm/hot start)
	 * 
	 * @param matsimParameter
	 */
	private void initInputPlansFile(ConfigType matsimParameter){
		log.info("Setting input plans file to config...");
		// get plans file for hot start
		String hotStart = matsimParameter.getHotStartPlansFile().getInputFile();
		// get plans file for warm start 
		String warmStart = matsimParameter.getInputPlansFile().getInputFile();
		
		// setting plans file as input
		if( !hotStart.equals("") &&
		  (new File(hotStart)).exists() ){
			log.info("Hot Start detcted!");
			setPlansFile( hotStart );
			scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_MODE, Constants.HOT_START);
		}
		else if( !warmStart.equals("") ){
			log.info("Warm Start detcted!");
			setPlansFile( warmStart );
			scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_MODE, Constants.WARM_START);
		}
		else{
			log.info("Cold Start (no pop file) detected!");
			scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.MATSIM_MODE, Constants.COLD_START);
		}
		
		// setting target location for hot start plans file
		if(!hotStart.equals("")){
			log.info("Storing plans file from current run. This enables hot start for next MATSim run.");
			scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.TARGET_LOCATION_HOT_START_PLANS_FILE, hotStart);
		}
		else
			scenario.getConfig().setParam(Constants.MATSIM_4_URBANSIM_PARAM, Constants.TARGET_LOCATION_HOT_START_PLANS_FILE, "");
	}

	/**
	 * 
	 */
	private void setPlansFile(String plansFile) {
		PlansConfigGroup plansCG = (PlansConfigGroup) scenario.getConfig().getModule(PlansConfigGroup.GROUP_NAME);
		// set values
		plansCG.setInputFile( plansFile );	// input plans file
		log.info("Input plans file set to: " + plansCG.getInputFile());
	}
	
	/**
	 * setting controler parameter
	 * 
	 * @param matsimParameter
	 */
	private void initControler(ConfigType matsimParameter){
		log.info("Setting controler to config...");
		int firstIteration = matsimParameter.getControler().getFirstIteration().intValue();
		int lastIteration = matsimParameter.getControler().getLastIteration().intValue();
		ControlerConfigGroup controlerCG = (ControlerConfigGroup) scenario.getConfig().getModule(ControlerConfigGroup.GROUP_NAME);
		// set values
		controlerCG.setFirstIteration( firstIteration );	// controller (first, last iteration)
		controlerCG.setLastIteration( lastIteration);
		controlerCG.setOutputDirectory( Constants.MATSIM_4_OPUS_OUTPUT );
		log.info("... done!");
		log.info("Controler FirstIteration: " + controlerCG.getFirstIteration() + " LastIteration: " + controlerCG.getLastIteration() + 
				          " MATSim output directory: " +  controlerCG.getOutputDirectory());
	}
	
	/**
	 * setting planCalcScore parameter
	 * 
	 * @param matsimParameter
	 */
	private void initPlanCalcScore(ConfigType matsimParameter){
		log.info("Setting planCalcScore to config...");
		String activityType_0 = matsimParameter.getPlanCalcScore().getActivityType0();
		String activityType_1 = matsimParameter.getPlanCalcScore().getActivityType1();
		ActivityParams actType0 = new ActivityParams(activityType_0);
		actType0.setTypicalDuration(12*60*60);	// tnicolai: make configurable
		ActivityParams actType1 = new ActivityParams(activityType_1);
		actType1.setTypicalDuration(8*60*60);	// tnicolai: make configurable
		actType1.setOpeningTime(7*3600);		// tnicolai: make configurable
		actType1.setLatestStartTime(9*3600);	// tnicolai: make configurable
		scenario.getConfig().planCalcScore().addActivityParams( actType0 );
		scenario.getConfig().planCalcScore().addActivityParams( actType1 );
		log.info("... done!");
		log.info("PlanCalcScore Activity_Type_0: " + actType0.getType() + " Typical Duration Activity_Type_0: " + actType0.getTypicalDuration() + 
							  " Activity_Type_1: " + actType1.getType() + " Typical Duration Activity_Type_1: " + actType1.getTypicalDuration() + 
							  " Opening Time Activity_Type_1: " + actType1.getOpeningTime() + " Latest Start Time Activity_Type_1: " + actType1.getLatestStartTime());
	}
	
	/**
	 * setting simulation
	 */
	private void initSimulation(){
		log.info("Setting simulation to config...");
		
		SimulationConfigGroup simulation = new SimulationConfigGroup();
		
		double popSampling = this.matsimConfig.getMatsim4Urbansim().getUrbansimParameter().getSamplingRate();
		double factor = popSampling * 1.0; //1.2;
		if(factor > 1.)
			factor = 1.;
		// tnicolai: implement flow capacity correction factor!!!
		simulation.setFlowCapFactor( factor );	
		simulation.setStorageCapFactor( factor );	
		log.warn("This uses the population sampling rate (" + popSampling + ") for flowCapFactor and storageCapFactor!");
		log.warn("Needs to be soveld by an flow capacity correction factor (tnicolai nov'12)!");
		
		boolean removeStuckVehicles = false;
		simulation.setRemoveStuckVehicles( removeStuckVehicles );
		simulation.setStuckTime(10.);
		
		scenario.getConfig().addSimulationConfigGroup( simulation );
		
		log.info("... done!");
		log.warn("Simulation FlowCapFactor: "+ scenario.getConfig().simulation().getFlowCapFactor() + " StorageCapFactor: " + scenario.getConfig().simulation().getStorageCapFactor() + 
						   " RemoveStuckVehicles: " + (removeStuckVehicles?"True":"False") + " StuckTime: " + scenario.getConfig().simulation().getStuckTime());
	}
	
	/**
	 * setting strategy
	 */
	private void initStrategy(){
		log.info("Setting strategy to config...");
		// configure strategies for re-planning tnicolai: make configurable
		scenario.getConfig().strategy().setMaxAgentPlanMemorySize(5);
		
		StrategyConfigGroup.StrategySettings timeAlocationMutator = new StrategyConfigGroup.StrategySettings(IdFactory.get(1));
		timeAlocationMutator.setModuleName("TimeAllocationMutator");
		timeAlocationMutator.setProbability(0.1);
		timeAlocationMutator.setDisableAfter(100);
		scenario.getConfig().strategy().addStrategySettings(timeAlocationMutator);
		
		StrategyConfigGroup.StrategySettings changeExpBeta = new StrategyConfigGroup.StrategySettings(IdFactory.get(2));
		changeExpBeta.setModuleName("ChangeExpBeta");
		changeExpBeta.setProbability(0.9);
		scenario.getConfig().strategy().addStrategySettings(changeExpBeta);
		
		StrategyConfigGroup.StrategySettings reroute = new StrategyConfigGroup.StrategySettings(IdFactory.get(3));
		reroute.setModuleName("ReRoute_Dijkstra");
		reroute.setProbability(0.1);
		reroute.setDisableAfter(100);
		scenario.getConfig().strategy().addStrategySettings(reroute);
		log.info("... done!");
		log.info("Strategy Strategy_1: " + timeAlocationMutator.getModuleName() + " Probability Strategy_1: " + timeAlocationMutator.getProbability() + " Disable After Itereation (Strategy_1): " + timeAlocationMutator.getDisableAfter() + 
						 " Strategy_2: " + changeExpBeta.getModuleName() + " Probability Strategy_2: " + changeExpBeta.getProbability() +
						 " Strategy_3_ " + reroute.getModuleName() + " Probability Strategy_3: " + reroute.getProbability() + " Disable After Itereation (Strategy_3): " + reroute.getDisableAfter() );
	}

}

