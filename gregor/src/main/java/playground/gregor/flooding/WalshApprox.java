/* *********************************************************************** *
 * project: org.matsim.*
 * WalshApprox.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2007 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */
package playground.gregor.flooding;

import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;



/**
 * @author laemmel
 *
 */
public class WalshApprox {
	
	
	static final byte [][] walsh16 = new byte [][] {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1},
		{1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1},
		{1,1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1},
		{1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,1},
		{1,1,-1,-1,-1,-1,1,1,-1,-1,1,1,1,1,-1,-1},
		{1,1,-1,-1,1,1,-1,-1,-1,-1,1,1,-1,-1,1,1},
		{1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1},
		{1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1},
		{1,-1,-1,1,1,-1,-1,1,-1,1,1,-1,-1,1,1,-1},
		{1,-1,-1,1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,1},
		{1,-1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,1,-1},
		{1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1},
		{1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,1,-1,1,-1},
		{1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,-1,1},
		{1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1},
	};
	public static final byte [][] walsh8 = new byte [][] {
		{1,1,1,1,1,1,1,1},
		{1,1,1,1,-1,-1,-1,-1},
		{1,1,-1,-1,-1,-1,1,1},
		{1,1,-1,-1,1,1,-1,-1},
		{1,-1,-1,1,1,-1,-1,1},
		{1,-1,-1,1,-1,1,1,-1},
		{1,-1,1,-1,-1,1,-1,1},
		{1,-1,1,-1,1,-1,1,-1},
	};	
	
	static final byte [][] walsh4 = new byte [][] {
		{1,1,1,1},
		{1,1,-1,-1},
		{1,-1,-1,1},
		{1,-1,1,-1},
	};	
	static final byte [][] walsh2 = new byte [][] {
		{1,1},
		{1,-1},
	};
	static final byte [][] walsh1 = new byte [][] {
		{1}
	};
	
	static final byte [][][] walshs = {walsh1,walsh2,walsh4,walsh8,walsh16};
			
	
//	private final double [] orig = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8530123233795166, 1.6930086612701416, 2.017273187637329, 2.3758175373077393, 2.673265218734741, 2.931382894515991, 3.391024351119995, 3.7924273014068604, 3.7482335567474365, 3.551593065261841, 3.1313812732696533, 2.4886581897735596, 1.728830099105835, 0.9354937076568604, 0.2558708190917969, 0.1610715389251709, 0.13408255577087402, 0.1132357120513916, 0.09879565238952637, 0.08560943603515625, 0.07341980934143066, 0.06242561340332031, 0.0539400577545166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1614060401916504, 0.6682171821594238, 1.352647066116333, 1.67799973487854, 1.534569501876831, 1.35160231590271, 1.2555758953094482, 1.335083246231079, 1.2011640071868896, 0.8256382942199707, 0.6170761585235596, 0.7646710872650146, 1.0677926540374756, 0.7442789077758789, 0.258617639541626, 0.09568023681640625, 0.05601668357849121, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	private final double [] orig = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3802361488342285, 0.9128460884094238, 1.1190447807312012, 1.2297091484069824, 1.2557525634765625, 1.206458568572998, 1.131382942199707, 1.047325611114502, 0.9713096618652344, 0.9071407318115234, 0.8516020774841309, 0.8067417144775391, 0.7694940567016602, 0.7359104156494141, 0.7062931060791016, 0.6785988807678223, 0.6533594131469727, 0.6313986778259277, 0.6108832359313965, 0.5912923812866211, 0.5736627578735352, 0.5572395324707031, 0.5422811508178711, 0.5277953147888184, 0.5154223442077637, 0.5015850067138672, 0.48868656158447266, 0.47619152069091797, 0.46460628509521484, 0.4534268379211426, 0.44297170639038086, 0.4328804016113281, 0.4228219985961914, 0.4127926826477051, 0.40395545959472656, 0.39471960067749023, 0.38666534423828125, 0.37909793853759766, 0.3713374137878418, 0.36403846740722656, 0.35638904571533203, 0.3494691848754883, 0.3425421714782715, 0.3352947235107422, 0.3293037414550781, 0.32274675369262695, 0.31659555435180664, 0.31019115447998047, 0.30399370193481445, 0.29808759689331055, 0.29256725311279297, 0.2889404296875, 0.28355836868286133, 0.2784919738769531, 0.2735257148742676, 0.26850032806396484, 0.2642374038696289, 0.26074647903442383, 0.260378360748291, 0.26243114471435547, 0.26354455947875977, 0.2633824348449707, 0.2622222900390625, 0.2602076530456543, 0.25774717330932617, 0.25473880767822266, 0.25162792205810547, 0.24817895889282227, 0.2441558837890625, 0.24060440063476562, 0.23714351654052734, 0.23315000534057617, 0.2292180061340332, 0.22534847259521484, 0.2217698097229004, 0.21825265884399414, 0.21446609497070312, 0.21095514297485352, 0.2073497772216797, 0.20386028289794922, 0.2003040313720703, 0.19684314727783203, 0.19335174560546875, 0.18982887268066406, 0.18660449981689453, 0.18315935134887695, 0.17998695373535156};
	public WalshApprox(double [] input) {
//		this.orig = input;
		
		List<List<Double>> walshApprox = new ArrayList<List<Double>>();
		for (int exp = 0; exp <= 4; exp++) {
			float[] coefs = getWalshCoefs(orig, exp);
			List<Double> rest = new ArrayList<Double>();
			for (int i = 1; i <= 120; i++) {
				if (i < coefs[coefs.length-1]) {
					rest.add(0.);
				} else {
					rest.add(getColor(i, coefs, exp));
				}
			}
			walshApprox.add(rest);
		}
		
		
		for (int i = 0; i < 120; i++) {
			System.out.print(i + ",");
			System.out.print(this.orig[i] + ",");
			System.out.print(walshApprox.get(0).get(i) + ",");
			System.out.print(walshApprox.get(1).get(i) + ",");
			System.out.print(walshApprox.get(2).get(i) + ",");
			System.out.print(walshApprox.get(3).get(i) + ",");
			System.out.println(walshApprox.get(4).get(i));
			
		}
		
		
		
//		System.out.println(rest);
		
	}
	
	public double getColor(int timeSlotIdx, float[] coef, int exp) {
		int res = (int) Math.pow(2, exp);
		byte[][] walsh = walshs[exp];
		
		double pos = ((timeSlotIdx-coef[res])/(120-coef[res])) * (res-1);
		int idx1 = (int) pos;
		int idx2 = (int) pos+1;
		double c1 = idx2 - pos;
		double c2 = 1 - c1;
		double restored = 0;
		for (int k = 0; k < res; k++) {
			if (c2 > 0) {
				restored += coef[k] * (c1*walsh[k][idx1] + c2 *walsh[k][idx2]); 
			} else {
				restored += coef[k] * walsh[k][idx1];
			}
		}
		
		
		return restored;
	}
	
	private float[] getWalshCoefs(double [] fs, int exp) {
		int res = (int) Math.pow(2, exp);
		float []  coeffs = new float [res+1];
//		this.seriesLength = Math.max(this.seriesLength, floodingSeries.size());
		coeffs[res] = fs.length;
		byte[][] walsh = walshs[exp];
		//TODO tmp res
		for (int idx = 0; idx < fs.length; idx++) {
			double d = fs[idx];
			if (d > 0.05) {
				coeffs[res] = idx;
				break;
			}
		}
		for (int k = 0; k < res; k++) {
			double tmp1 = 0;
			double tmp2 = 0;
			for (int i = (int)coeffs[res]; i < fs.length; i++ ) {
				int idx = (int) Math.round(((double)(i-(int)coeffs[res])/(fs.length-(int)coeffs[res])) * (res-1));
				tmp1 += fs[i] * walsh[k][idx];
				tmp2 +=  walsh[k][idx] * walsh[k][idx];
			}
			coeffs[k] = (float)(tmp1/tmp2);
		}


		return coeffs;
	}
	
	public static void main(String [] args) {
		new WalshApprox(null);
	}

}
